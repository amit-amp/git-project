/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGitProviderSettingArgs } from "./CreateGitProviderSettingArgs";
import { UpdateGitProviderSettingArgs } from "./UpdateGitProviderSettingArgs";
import { DeleteGitProviderSettingArgs } from "./DeleteGitProviderSettingArgs";
import { GitProviderSettingFindManyArgs } from "./GitProviderSettingFindManyArgs";
import { GitProviderSettingFindUniqueArgs } from "./GitProviderSettingFindUniqueArgs";
import { GitProviderSetting } from "./GitProviderSetting";
import { GitSpace } from "../../gitSpace/base/GitSpace";
import { GitProviderSettingService } from "../gitProviderSetting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Gitprovidersetting)
export class GitProviderSettingResolverBase {
  constructor(
    protected readonly service: GitProviderSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "read",
    possession: "any",
  })
  async _gitProviderSettingsMeta(
    @graphql.Args() args: GitProviderSettingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GitProviderSetting])
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "read",
    possession: "any",
  })
  async gitProviderSettings(
    @graphql.Args() args: GitProviderSettingFindManyArgs
  ): Promise<GitProviderSetting[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GitProviderSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "read",
    possession: "own",
  })
  async gitProviderSetting(
    @graphql.Args() args: GitProviderSettingFindUniqueArgs
  ): Promise<GitProviderSetting | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GitProviderSetting)
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "create",
    possession: "any",
  })
  async createGitProviderSetting(
    @graphql.Args() args: CreateGitProviderSettingArgs
  ): Promise<GitProviderSetting> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        gitSpaces: args.data.gitSpaces
          ? {
              connect: args.data.gitSpaces,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GitProviderSetting)
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "update",
    possession: "any",
  })
  async updateGitProviderSetting(
    @graphql.Args() args: UpdateGitProviderSettingArgs
  ): Promise<GitProviderSetting | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          gitSpaces: args.data.gitSpaces
            ? {
                connect: args.data.gitSpaces,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GitProviderSetting)
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "delete",
    possession: "any",
  })
  async deleteGitProviderSetting(
    @graphql.Args() args: DeleteGitProviderSettingArgs
  ): Promise<GitProviderSetting | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => GitSpace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "read",
    possession: "any",
  })
  async gitSpaces(
    @graphql.Parent() parent: GitProviderSetting
  ): Promise<GitSpace | null> {
    const result = await this.service.getGitSpaces(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
