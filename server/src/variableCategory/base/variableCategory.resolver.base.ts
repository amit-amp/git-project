/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateVariableCategoryArgs } from "./CreateVariableCategoryArgs";
import { UpdateVariableCategoryArgs } from "./UpdateVariableCategoryArgs";
import { DeleteVariableCategoryArgs } from "./DeleteVariableCategoryArgs";
import { VariableCategoryFindManyArgs } from "./VariableCategoryFindManyArgs";
import { VariableCategoryFindUniqueArgs } from "./VariableCategoryFindUniqueArgs";
import { VariableCategory } from "./VariableCategory";
import { CategoryFindManyArgs } from "../../category/base/CategoryFindManyArgs";
import { Category } from "../../category/base/Category";
import { VariableFindManyArgs } from "../../variable/base/VariableFindManyArgs";
import { Variable } from "../../variable/base/Variable";
import { User } from "../../user/base/User";
import { VariableCategoryService } from "../variableCategory.service";
@graphql.Resolver(() => VariableCategory)
export class VariableCategoryResolverBase {
  constructor(protected readonly service: VariableCategoryService) {}

  async _variableCategoriesMeta(
    @graphql.Args() args: VariableCategoryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [VariableCategory])
  async variableCategories(
    @graphql.Args() args: VariableCategoryFindManyArgs
  ): Promise<VariableCategory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => VariableCategory, { nullable: true })
  async variableCategory(
    @graphql.Args() args: VariableCategoryFindUniqueArgs
  ): Promise<VariableCategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VariableCategory)
  async createVariableCategory(
    @graphql.Args() args: CreateVariableCategoryArgs
  ): Promise<VariableCategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VariableCategory)
  async updateVariableCategory(
    @graphql.Args() args: UpdateVariableCategoryArgs
  ): Promise<VariableCategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VariableCategory)
  async deleteVariableCategory(
    @graphql.Args() args: DeleteVariableCategoryArgs
  ): Promise<VariableCategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Category])
  async categories(
    @graphql.Parent() parent: VariableCategory,
    @graphql.Args() args: CategoryFindManyArgs
  ): Promise<Category[]> {
    const results = await this.service.findCategories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Variable])
  async variables(
    @graphql.Parent() parent: VariableCategory,
    @graphql.Args() args: VariableFindManyArgs
  ): Promise<Variable[]> {
    const results = await this.service.findVariables(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, { nullable: true })
  async user(@graphql.Parent() parent: VariableCategory): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
