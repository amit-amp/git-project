/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGitSpaceArgs } from "./CreateGitSpaceArgs";
import { UpdateGitSpaceArgs } from "./UpdateGitSpaceArgs";
import { DeleteGitSpaceArgs } from "./DeleteGitSpaceArgs";
import { GitSpaceFindManyArgs } from "./GitSpaceFindManyArgs";
import { GitSpaceFindUniqueArgs } from "./GitSpaceFindUniqueArgs";
import { GitSpace } from "./GitSpace";
import { GitProviderSetting } from "../../gitProviderSetting/base/GitProviderSetting";
import { User } from "../../user/base/User";
import { GitSpaceService } from "../gitSpace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Gitspace)
export class GitSpaceResolverBase {
  constructor(
    protected readonly service: GitSpaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "read",
    possession: "any",
  })
  async _gitSpacesMeta(
    @graphql.Args() args: GitSpaceFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GitSpace])
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "read",
    possession: "any",
  })
  async gitSpaces(
    @graphql.Args() args: GitSpaceFindManyArgs
  ): Promise<GitSpace[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GitSpace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "read",
    possession: "own",
  })
  async gitSpace(
    @graphql.Args() args: GitSpaceFindUniqueArgs
  ): Promise<GitSpace | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GitSpace)
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "create",
    possession: "any",
  })
  async createGitSpace(
    @graphql.Args() args: CreateGitSpaceArgs
  ): Promise<GitSpace> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        gitProviderSetting: args.data.gitProviderSetting
          ? {
              connect: args.data.gitProviderSetting,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GitSpace)
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "update",
    possession: "any",
  })
  async updateGitSpace(
    @graphql.Args() args: UpdateGitSpaceArgs
  ): Promise<GitSpace | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          gitProviderSetting: args.data.gitProviderSetting
            ? {
                connect: args.data.gitProviderSetting,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GitSpace)
  @nestAccessControl.UseRoles({
    resource: "GitSpace",
    action: "delete",
    possession: "any",
  })
  async deleteGitSpace(
    @graphql.Args() args: DeleteGitSpaceArgs
  ): Promise<GitSpace | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => GitProviderSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GitProviderSetting",
    action: "read",
    possession: "any",
  })
  async gitProviderSetting(
    @graphql.Parent() parent: GitSpace
  ): Promise<GitProviderSetting | null> {
    const result = await this.service.getGitProviderSetting(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: GitSpace): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
